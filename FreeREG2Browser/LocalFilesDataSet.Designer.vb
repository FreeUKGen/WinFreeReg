'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("LocalFilesDataSet"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class LocalFilesDataSet
    Inherits Global.System.Data.DataSet
    
    Private tableLocalFile As LocalFileDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("LocalFile")) Is Nothing) Then
                MyBase.Tables.Add(New LocalFileDataTable(ds.Tables("LocalFile")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property LocalFile() As LocalFileDataTable
        Get
            Return Me.tableLocalFile
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As LocalFilesDataSet = CType(MyBase.Clone,LocalFilesDataSet)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
            ds.ReadXml(reader)
            If (Not (ds.Tables("LocalFile")) Is Nothing) Then
                MyBase.Tables.Add(New LocalFileDataTable(ds.Tables("LocalFile")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableLocalFile = CType(MyBase.Tables("LocalFile"),LocalFileDataTable)
        If (initTable = true) Then
            If (Not (Me.tableLocalFile) Is Nothing) Then
                Me.tableLocalFile.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Sub InitClass()
        Me.DataSetName = "LocalFilesDataSet"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/LocalFilesDataSet.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableLocalFile = New LocalFileDataTable()
        MyBase.Tables.Add(Me.tableLocalFile)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeLocalFile() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As LocalFilesDataSet = New LocalFilesDataSet()
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub LocalFileRowChangeEventHandler(ByVal sender As Object, ByVal e As LocalFileRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class LocalFileDataTable
        Inherits Global.System.Data.TypedTableBase(Of LocalFileRow)
        
        Private columnName As Global.System.Data.DataColumn
        
        Private columnLength As Global.System.Data.DataColumn
        
        Private columnDirectoryName As Global.System.Data.DataColumn
        
        Private columnDirectory As Global.System.Data.DataColumn
        
        Private columnIsReadOnly As Global.System.Data.DataColumn
        
        Private columnExists As Global.System.Data.DataColumn
        
        Private columnFullName As Global.System.Data.DataColumn
        
        Private columnExtension As Global.System.Data.DataColumn
        
        Private columnCreationTime As Global.System.Data.DataColumn
        
        Private columnCreationTimeUtc As Global.System.Data.DataColumn
        
        Private columnLastAccessTime As Global.System.Data.DataColumn
        
        Private columnLastAccessTimeUtc As Global.System.Data.DataColumn
        
		Private columnLastWriteTime As Global.System.Data.DataColumn

		Private columnLastWriteTimeUtc As Global.System.Data.DataColumn

		Private columnAttributes As Global.System.Data.DataColumn

		Private columnLastUploadTime As Global.System.Data.DataColumn

		Private columnPlace As Global.System.Data.DataColumn

		Private columnChurch As Global.System.Data.DataColumn

		Private columnRecordType As Global.System.Data.DataColumn

		Private columnValidFile As Global.System.Data.DataColumn

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
		 Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Public Sub New()
			MyBase.New()
			Me.TableName = "LocalFile"
			Me.BeginInit()
			Me.InitClass()
			Me.EndInit()
		End Sub

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
		 Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Friend Sub New(ByVal table As Global.System.Data.DataTable)
			MyBase.New()
			Me.TableName = table.TableName
			If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
				Me.CaseSensitive = table.CaseSensitive
			End If
			If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
				Me.Locale = table.Locale
			End If
			If (table.Namespace <> table.DataSet.Namespace) Then
				Me.Namespace = table.Namespace
			End If
			Me.Prefix = table.Prefix
			Me.MinimumCapacity = table.MinimumCapacity
		End Sub

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
		 Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
			MyBase.New(info, context)
			Me.InitVars()
		End Sub

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
		 Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Public ReadOnly Property NameColumn() As Global.System.Data.DataColumn
			Get
				Return Me.columnName
			End Get
		End Property

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
		 Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Public ReadOnly Property LengthColumn() As Global.System.Data.DataColumn
			Get
				Return Me.columnLength
			End Get
		End Property

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
		 Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Public ReadOnly Property DirectoryNameColumn() As Global.System.Data.DataColumn
			Get
				Return Me.columnDirectoryName
			End Get
		End Property

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
		 Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Public ReadOnly Property DirectoryColumn() As Global.System.Data.DataColumn
			Get
				Return Me.columnDirectory
			End Get
		End Property

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
		 Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Public ReadOnly Property IsReadOnlyColumn() As Global.System.Data.DataColumn
			Get
				Return Me.columnIsReadOnly
			End Get
		End Property

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
		 Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Public ReadOnly Property ExistsColumn() As Global.System.Data.DataColumn
			Get
				Return Me.columnExists
			End Get
		End Property

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
		 Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Public ReadOnly Property FullNameColumn() As Global.System.Data.DataColumn
			Get
				Return Me.columnFullName
			End Get
		End Property

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
		 Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Public ReadOnly Property ExtensionColumn() As Global.System.Data.DataColumn
			Get
				Return Me.columnExtension
			End Get
		End Property

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
		 Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Public ReadOnly Property CreationTimeColumn() As Global.System.Data.DataColumn
			Get
				Return Me.columnCreationTime
			End Get
		End Property

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
		 Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Public ReadOnly Property CreationTimeUtcColumn() As Global.System.Data.DataColumn
			Get
				Return Me.columnCreationTimeUtc
			End Get
		End Property

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
		 Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Public ReadOnly Property LastAccessTimeColumn() As Global.System.Data.DataColumn
			Get
				Return Me.columnLastAccessTime
			End Get
		End Property

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
		 Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Public ReadOnly Property LastAccessTimeUtcColumn() As Global.System.Data.DataColumn
			Get
				Return Me.columnLastAccessTimeUtc
			End Get
		End Property

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
		 Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Public ReadOnly Property LastWriteTimeColumn() As Global.System.Data.DataColumn
			Get
				Return Me.columnLastWriteTime
			End Get
		End Property

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
		 Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Public ReadOnly Property LastWriteTimeUtcColumn() As Global.System.Data.DataColumn
			Get
				Return Me.columnLastWriteTimeUtc
			End Get
		End Property

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
		 Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Public ReadOnly Property AttributesColumn() As Global.System.Data.DataColumn
			Get
				Return Me.columnAttributes
			End Get
		End Property

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
		 Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Public ReadOnly Property LastUploadTimeColumn() As Global.System.Data.DataColumn
			Get
				Return Me.columnLastUploadTime
			End Get
		End Property

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
		 Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Public ReadOnly Property PlaceColumn() As Global.System.Data.DataColumn
			Get
				Return Me.columnPlace
			End Get
		End Property

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
		 Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Public ReadOnly Property ChurchColumn() As Global.System.Data.DataColumn
			Get
				Return Me.columnChurch
			End Get
		End Property

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
		 Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Public ReadOnly Property RecordTypeColumn() As Global.System.Data.DataColumn
			Get
				Return Me.columnRecordType
			End Get
		End Property

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
		 Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Public ReadOnly Property ValidFileColumn() As Global.System.Data.DataColumn
			Get
				Return Me.columnValidFile
			End Get
		End Property

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
		 Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
		 Global.System.ComponentModel.Browsable(False)> _
		Public ReadOnly Property Count() As Integer
			Get
				Return Me.Rows.Count
			End Get
		End Property

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
		 Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Default Public ReadOnly Property Item(ByVal index As Integer) As LocalFileRow
			Get
				Return CType(Me.Rows(index), LocalFileRow)
			End Get
		End Property

		<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Public Event LocalFileRowChanging As LocalFileRowChangeEventHandler

		<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Public Event LocalFileRowChanged As LocalFileRowChangeEventHandler

		<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Public Event LocalFileRowDeleting As LocalFileRowChangeEventHandler

		<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Public Event LocalFileRowDeleted As LocalFileRowChangeEventHandler

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
		 Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Public Overloads Sub AddLocalFileRow(ByVal row As LocalFileRow)
			Me.Rows.Add(row)
		End Sub

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
		 Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Public Overloads Function AddLocalFileRow( _
						  ByVal Name As String, _
						  ByVal Length As UInteger, _
						  ByVal DirectoryName As String, _
						  ByVal Directory As Object, _
						  ByVal IsReadOnly As Boolean, _
						  ByVal Exists As Boolean, _
						  ByVal FullName As String, _
						  ByVal Extension As String, _
						  ByVal CreationTime As Date, _
						  ByVal CreationTimeUtc As Date, _
						  ByVal LastAccessTime As Date, _
						  ByVal LastAccessTimeUtc As Date, _
						  ByVal LastWriteTime As Date, _
						  ByVal LastWriteTimeUtc As Date, _
						  ByVal Attributes As UInteger, _
						  ByVal LastUploadTime As Date, _
						  ByVal Place As String, _
						  ByVal Church As String, _
						  ByVal RecordType As String, _
						  ByVal ValidFile As Boolean) As LocalFileRow
			Dim rowLocalFileRow As LocalFileRow = CType(Me.NewRow, LocalFileRow)
			Dim columnValuesArray() As Object = New Object() {Name, Length, DirectoryName, Directory, IsReadOnly, Exists, FullName, Extension, CreationTime, CreationTimeUtc, LastAccessTime, LastAccessTimeUtc, LastWriteTime, LastWriteTimeUtc, Attributes, LastUploadTime, Place, Church, RecordType, ValidFile}
			rowLocalFileRow.ItemArray = columnValuesArray
			Me.Rows.Add(rowLocalFileRow)
			Return rowLocalFileRow
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
		 Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Public Function FindByFullName(ByVal FullName As String) As LocalFileRow
			Return CType(Me.Rows.Find(New Object() {FullName}), LocalFileRow)
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
		 Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Public Overrides Function Clone() As Global.System.Data.DataTable
			Dim cln As LocalFileDataTable = CType(MyBase.Clone, LocalFileDataTable)
			cln.InitVars()
			Return cln
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
		 Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
			Return New LocalFileDataTable()
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
		 Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Friend Sub InitVars()
			Me.columnName = MyBase.Columns("Name")
			Me.columnLength = MyBase.Columns("Length")
			Me.columnDirectoryName = MyBase.Columns("DirectoryName")
			Me.columnDirectory = MyBase.Columns("Directory")
			Me.columnIsReadOnly = MyBase.Columns("IsReadOnly")
			Me.columnExists = MyBase.Columns("Exists")
			Me.columnFullName = MyBase.Columns("FullName")
			Me.columnExtension = MyBase.Columns("Extension")
			Me.columnCreationTime = MyBase.Columns("CreationTime")
			Me.columnCreationTimeUtc = MyBase.Columns("CreationTimeUtc")
			Me.columnLastAccessTime = MyBase.Columns("LastAccessTime")
			Me.columnLastAccessTimeUtc = MyBase.Columns("LastAccessTimeUtc")
			Me.columnLastWriteTime = MyBase.Columns("LastWriteTime")
			Me.columnLastWriteTimeUtc = MyBase.Columns("LastWriteTimeUtc")
			Me.columnAttributes = MyBase.Columns("Attributes")
			Me.columnLastUploadTime = MyBase.Columns("LastUploadTime")
			Me.columnPlace = MyBase.Columns("Place")
			Me.columnChurch = MyBase.Columns("Church")
			Me.columnRecordType = MyBase.Columns("RecordType")
			Me.columnValidFile = MyBase.Columns("ValidFile")
		End Sub

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
		 Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Private Sub InitClass()
			Me.columnName = New Global.System.Data.DataColumn("Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
			MyBase.Columns.Add(Me.columnName)
			Me.columnLength = New Global.System.Data.DataColumn("Length", GetType(UInteger), Nothing, Global.System.Data.MappingType.Element)
			MyBase.Columns.Add(Me.columnLength)
			Me.columnDirectoryName = New Global.System.Data.DataColumn("DirectoryName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
			MyBase.Columns.Add(Me.columnDirectoryName)
			Me.columnDirectory = New Global.System.Data.DataColumn("Directory", GetType(Object), Nothing, Global.System.Data.MappingType.Element)
			MyBase.Columns.Add(Me.columnDirectory)
			Me.columnIsReadOnly = New Global.System.Data.DataColumn("IsReadOnly", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
			MyBase.Columns.Add(Me.columnIsReadOnly)
			Me.columnExists = New Global.System.Data.DataColumn("Exists", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
			MyBase.Columns.Add(Me.columnExists)
			Me.columnFullName = New Global.System.Data.DataColumn("FullName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
			MyBase.Columns.Add(Me.columnFullName)
			Me.columnExtension = New Global.System.Data.DataColumn("Extension", GetType(String), Nothing, Global.System.Data.MappingType.Element)
			MyBase.Columns.Add(Me.columnExtension)
			Me.columnCreationTime = New Global.System.Data.DataColumn("CreationTime", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
			MyBase.Columns.Add(Me.columnCreationTime)
			Me.columnCreationTimeUtc = New Global.System.Data.DataColumn("CreationTimeUtc", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
			MyBase.Columns.Add(Me.columnCreationTimeUtc)
			Me.columnLastAccessTime = New Global.System.Data.DataColumn("LastAccessTime", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
			MyBase.Columns.Add(Me.columnLastAccessTime)
			Me.columnLastAccessTimeUtc = New Global.System.Data.DataColumn("LastAccessTimeUtc", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
			MyBase.Columns.Add(Me.columnLastAccessTimeUtc)
			Me.columnLastWriteTime = New Global.System.Data.DataColumn("LastWriteTime", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
			MyBase.Columns.Add(Me.columnLastWriteTime)
			Me.columnLastWriteTimeUtc = New Global.System.Data.DataColumn("LastWriteTimeUtc", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
			MyBase.Columns.Add(Me.columnLastWriteTimeUtc)
			Me.columnAttributes = New Global.System.Data.DataColumn("Attributes", GetType(UInteger), Nothing, Global.System.Data.MappingType.Element)
			MyBase.Columns.Add(Me.columnAttributes)
			Me.columnLastUploadTime = New Global.System.Data.DataColumn("LastUploadTime", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
			MyBase.Columns.Add(Me.columnLastUploadTime)
			Me.columnPlace = New Global.System.Data.DataColumn("Place", GetType(String), Nothing, Global.System.Data.MappingType.Element)
			MyBase.Columns.Add(Me.columnPlace)
			Me.columnChurch = New Global.System.Data.DataColumn("Church", GetType(String), Nothing, Global.System.Data.MappingType.Element)
			MyBase.Columns.Add(Me.columnChurch)
			Me.columnRecordType = New Global.System.Data.DataColumn("RecordType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
			MyBase.Columns.Add(Me.columnRecordType)
			Me.columnValidFile = New Global.System.Data.DataColumn("ValidFile", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
			MyBase.Columns.Add(Me.columnValidFile)
			Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnFullName}, True))
			Me.columnFullName.AllowDBNull = False
			Me.columnFullName.Unique = True
			Me.columnValidFile.Caption = "Valid"
			Me.columnValidFile.DefaultValue = CType(True, Boolean)
			Me.Locale = New Global.System.Globalization.CultureInfo("en")
		End Sub

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
		 Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Public Function NewLocalFileRow() As LocalFileRow
			Return CType(Me.NewRow, LocalFileRow)
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
		 Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
			Return New LocalFileRow(builder)
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
		 Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Protected Overrides Function GetRowType() As Global.System.Type
			Return GetType(LocalFileRow)
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
		 Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
			MyBase.OnRowChanged(e)
			If (Not (Me.LocalFileRowChangedEvent) Is Nothing) Then
				RaiseEvent LocalFileRowChanged(Me, New LocalFileRowChangeEvent(CType(e.Row, LocalFileRow), e.Action))
			End If
		End Sub

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
		 Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
			MyBase.OnRowChanging(e)
			If (Not (Me.LocalFileRowChangingEvent) Is Nothing) Then
				RaiseEvent LocalFileRowChanging(Me, New LocalFileRowChangeEvent(CType(e.Row, LocalFileRow), e.Action))
			End If
		End Sub

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
		 Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
			MyBase.OnRowDeleted(e)
			If (Not (Me.LocalFileRowDeletedEvent) Is Nothing) Then
				RaiseEvent LocalFileRowDeleted(Me, New LocalFileRowChangeEvent(CType(e.Row, LocalFileRow), e.Action))
			End If
		End Sub

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
		 Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
			MyBase.OnRowDeleting(e)
			If (Not (Me.LocalFileRowDeletingEvent) Is Nothing) Then
				RaiseEvent LocalFileRowDeleting(Me, New LocalFileRowChangeEvent(CType(e.Row, LocalFileRow), e.Action))
			End If
		End Sub

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
		 Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Public Sub RemoveLocalFileRow(ByVal row As LocalFileRow)
			Me.Rows.Remove(row)
		End Sub

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
		 Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
			Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
			Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
			Dim ds As LocalFilesDataSet = New LocalFilesDataSet()
			Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
			any1.Namespace = "http://www.w3.org/2001/XMLSchema"
			any1.MinOccurs = New Decimal(0)
			any1.MaxOccurs = Decimal.MaxValue
			any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
			sequence.Items.Add(any1)
			Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
			any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
			any2.MinOccurs = New Decimal(1)
			any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
			sequence.Items.Add(any2)
			Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
			attribute1.Name = "namespace"
			attribute1.FixedValue = ds.Namespace
			type.Attributes.Add(attribute1)
			Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
			attribute2.Name = "tableTypeName"
			attribute2.FixedValue = "LocalFileDataTable"
			type.Attributes.Add(attribute2)
			type.Particle = sequence
			Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
			If xs.Contains(dsSchema.TargetNamespace) Then
				Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
				Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
				Try
					Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
					dsSchema.Write(s1)
					Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
					Do While schemas.MoveNext
						schema = CType(schemas.Current, Global.System.Xml.Schema.XmlSchema)
						s2.SetLength(0)
						schema.Write(s2)
						If (s1.Length = s2.Length) Then
							s1.Position = 0
							s2.Position = 0

							Do While ((s1.Position <> s1.Length) _
											AndAlso (s1.ReadByte = s2.ReadByte))


							Loop
							If (s1.Position = s1.Length) Then
								Return type
							End If
						End If

					Loop
				Finally
					If (Not (s1) Is Nothing) Then
						s1.Close()
					End If
					If (Not (s2) Is Nothing) Then
						s2.Close()
					End If
				End Try
			End If
			xs.Add(dsSchema)
			Return type
		End Function
	End Class

	'''<summary>
	'''Represents strongly named DataRow class.
	'''</summary>
	Partial Public Class LocalFileRow
		Inherits Global.System.Data.DataRow

		Private tableLocalFile As LocalFileDataTable

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
		 Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
			MyBase.New(rb)
			Me.tableLocalFile = CType(Me.Table, LocalFileDataTable)
		End Sub

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
		 Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Public Property Name() As String
			Get
				Try
					Return CType(Me(Me.tableLocalFile.NameColumn), String)
				Catch e As Global.System.InvalidCastException
					Throw New Global.System.Data.StrongTypingException("The value for column 'Name' in table 'LocalFile' is DBNull.", e)
				End Try
			End Get
			Set(value As String)
				Me(Me.tableLocalFile.NameColumn) = value
			End Set
		End Property

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
		 Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Public Property Length() As UInteger
			Get
				Try
					Return CType(Me(Me.tableLocalFile.LengthColumn), UInteger)
				Catch e As Global.System.InvalidCastException
					Throw New Global.System.Data.StrongTypingException("The value for column 'Length' in table 'LocalFile' is DBNull.", e)
				End Try
			End Get
			Set(value As UInteger)
				Me(Me.tableLocalFile.LengthColumn) = value
			End Set
		End Property

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
		 Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Public Property DirectoryName() As String
			Get
				Try
					Return CType(Me(Me.tableLocalFile.DirectoryNameColumn), String)
				Catch e As Global.System.InvalidCastException
					Throw New Global.System.Data.StrongTypingException("The value for column 'DirectoryName' in table 'LocalFile' is DBNull.", e)
				End Try
			End Get
			Set(value As String)
				Me(Me.tableLocalFile.DirectoryNameColumn) = value
			End Set
		End Property

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
		 Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Public Property Directory() As Object
			Get
				Try
					Return CType(Me(Me.tableLocalFile.DirectoryColumn), Object)
				Catch e As Global.System.InvalidCastException
					Throw New Global.System.Data.StrongTypingException("The value for column 'Directory' in table 'LocalFile' is DBNull.", e)
				End Try
			End Get
			Set(value As Object)
				Me(Me.tableLocalFile.DirectoryColumn) = value
			End Set
		End Property

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
		 Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Public Property IsReadOnly() As Boolean
			Get
				Try
					Return CType(Me(Me.tableLocalFile.IsReadOnlyColumn), Boolean)
				Catch e As Global.System.InvalidCastException
					Throw New Global.System.Data.StrongTypingException("The value for column 'IsReadOnly' in table 'LocalFile' is DBNull.", e)
				End Try
			End Get
			Set(value As Boolean)
				Me(Me.tableLocalFile.IsReadOnlyColumn) = value
			End Set
		End Property

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
		 Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Public Property Exists() As Boolean
			Get
				Try
					Return CType(Me(Me.tableLocalFile.ExistsColumn), Boolean)
				Catch e As Global.System.InvalidCastException
					Throw New Global.System.Data.StrongTypingException("The value for column 'Exists' in table 'LocalFile' is DBNull.", e)
				End Try
			End Get
			Set(value As Boolean)
				Me(Me.tableLocalFile.ExistsColumn) = value
			End Set
		End Property

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
		 Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Public Property FullName() As String
			Get
				Return CType(Me(Me.tableLocalFile.FullNameColumn), String)
			End Get
			Set(value As String)
				Me(Me.tableLocalFile.FullNameColumn) = value
			End Set
		End Property

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
		 Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Public Property Extension() As String
			Get
				Try
					Return CType(Me(Me.tableLocalFile.ExtensionColumn), String)
				Catch e As Global.System.InvalidCastException
					Throw New Global.System.Data.StrongTypingException("The value for column 'Extension' in table 'LocalFile' is DBNull.", e)
				End Try
			End Get
			Set(value As String)
				Me(Me.tableLocalFile.ExtensionColumn) = value
			End Set
		End Property

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
		 Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Public Property CreationTime() As Date
			Get
				Try
					Return CType(Me(Me.tableLocalFile.CreationTimeColumn), Date)
				Catch e As Global.System.InvalidCastException
					Throw New Global.System.Data.StrongTypingException("The value for column 'CreationTime' in table 'LocalFile' is DBNull.", e)
				End Try
			End Get
			Set(value As Date)
				Me(Me.tableLocalFile.CreationTimeColumn) = value
			End Set
		End Property

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
		 Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Public Property CreationTimeUtc() As Date
			Get
				Try
					Return CType(Me(Me.tableLocalFile.CreationTimeUtcColumn), Date)
				Catch e As Global.System.InvalidCastException
					Throw New Global.System.Data.StrongTypingException("The value for column 'CreationTimeUtc' in table 'LocalFile' is DBNull.", e)
				End Try
			End Get
			Set(value As Date)
				Me(Me.tableLocalFile.CreationTimeUtcColumn) = value
			End Set
		End Property

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
		 Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Public Property LastAccessTime() As Date
			Get
				Try
					Return CType(Me(Me.tableLocalFile.LastAccessTimeColumn), Date)
				Catch e As Global.System.InvalidCastException
					Throw New Global.System.Data.StrongTypingException("The value for column 'LastAccessTime' in table 'LocalFile' is DBNull.", e)
				End Try
			End Get
			Set(value As Date)
				Me(Me.tableLocalFile.LastAccessTimeColumn) = value
			End Set
		End Property

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
		 Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Public Property LastAccessTimeUtc() As Date
			Get
				Try
					Return CType(Me(Me.tableLocalFile.LastAccessTimeUtcColumn), Date)
				Catch e As Global.System.InvalidCastException
					Throw New Global.System.Data.StrongTypingException("The value for column 'LastAccessTimeUtc' in table 'LocalFile' is DBNull.", e)
				End Try
			End Get
			Set(value As Date)
				Me(Me.tableLocalFile.LastAccessTimeUtcColumn) = value
			End Set
		End Property

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
		 Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Public Property LastWriteTime() As Date
			Get
				Try
					Return CType(Me(Me.tableLocalFile.LastWriteTimeColumn), Date)
				Catch e As Global.System.InvalidCastException
					Throw New Global.System.Data.StrongTypingException("The value for column 'LastWriteTime' in table 'LocalFile' is DBNull.", e)
				End Try
			End Get
			Set(value As Date)
				Me(Me.tableLocalFile.LastWriteTimeColumn) = value
			End Set
		End Property

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
		 Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Public Property LastWriteTimeUtc() As Date
			Get
				Try
					Return CType(Me(Me.tableLocalFile.LastWriteTimeUtcColumn), Date)
				Catch e As Global.System.InvalidCastException
					Throw New Global.System.Data.StrongTypingException("The value for column 'LastWriteTimeUtc' in table 'LocalFile' is DBNull.", e)
				End Try
			End Get
			Set(value As Date)
				Me(Me.tableLocalFile.LastWriteTimeUtcColumn) = value
			End Set
		End Property

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
		 Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Public Property Attributes() As UInteger
			Get
				Try
					Return CType(Me(Me.tableLocalFile.AttributesColumn), UInteger)
				Catch e As Global.System.InvalidCastException
					Throw New Global.System.Data.StrongTypingException("The value for column 'Attributes' in table 'LocalFile' is DBNull.", e)
				End Try
			End Get
			Set(value As UInteger)
				Me(Me.tableLocalFile.AttributesColumn) = value
			End Set
		End Property

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
		 Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Public Property LastUploadTime() As Date
			Get
				Try
					Return CType(Me(Me.tableLocalFile.LastUploadTimeColumn), Date)
				Catch e As Global.System.InvalidCastException
					Throw New Global.System.Data.StrongTypingException("The value for column 'LastUploadTime' in table 'LocalFile' is DBNull.", e)
				End Try
			End Get
			Set(value As Date)
				Me(Me.tableLocalFile.LastUploadTimeColumn) = value
			End Set
		End Property

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
		 Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Public Property Place() As String
			Get
				Try
					Return CType(Me(Me.tableLocalFile.PlaceColumn), String)
				Catch e As Global.System.InvalidCastException
					Throw New Global.System.Data.StrongTypingException("The value for column 'Place' in table 'LocalFile' is DBNull.", e)
				End Try
			End Get
			Set(value As String)
				Me(Me.tableLocalFile.PlaceColumn) = value
			End Set
		End Property

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
		 Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Public Property Church() As String
			Get
				Try
					Return CType(Me(Me.tableLocalFile.ChurchColumn), String)
				Catch e As Global.System.InvalidCastException
					Throw New Global.System.Data.StrongTypingException("The value for column 'Church' in table 'LocalFile' is DBNull.", e)
				End Try
			End Get
			Set(value As String)
				Me(Me.tableLocalFile.ChurchColumn) = value
			End Set
		End Property

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
		 Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Public Property RecordType() As String
			Get
				Try
					Return CType(Me(Me.tableLocalFile.RecordTypeColumn), String)
				Catch e As Global.System.InvalidCastException
					Throw New Global.System.Data.StrongTypingException("The value for column 'RecordType' in table 'LocalFile' is DBNull.", e)
				End Try
			End Get
			Set(value As String)
				Me(Me.tableLocalFile.RecordTypeColumn) = value
			End Set
		End Property

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
		 Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Public Property ValidFile() As Boolean
			Get
				Try
					Return CType(Me(Me.tableLocalFile.ValidFileColumn), Boolean)
				Catch e As Global.System.InvalidCastException
					Throw New Global.System.Data.StrongTypingException("The value for column 'ValidFile' in table 'LocalFile' is DBNull.", e)
				End Try
			End Get
			Set(value As Boolean)
				Me(Me.tableLocalFile.ValidFileColumn) = value
			End Set
		End Property

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
		 Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Public Function IsNameNull() As Boolean
			Return Me.IsNull(Me.tableLocalFile.NameColumn)
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
		 Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Public Sub SetNameNull()
			Me(Me.tableLocalFile.NameColumn) = Global.System.Convert.DBNull
		End Sub

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
		 Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Public Function IsLengthNull() As Boolean
			Return Me.IsNull(Me.tableLocalFile.LengthColumn)
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
		 Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Public Sub SetLengthNull()
			Me(Me.tableLocalFile.LengthColumn) = Global.System.Convert.DBNull
		End Sub

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
		 Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Public Function IsDirectoryNameNull() As Boolean
			Return Me.IsNull(Me.tableLocalFile.DirectoryNameColumn)
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
		 Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Public Sub SetDirectoryNameNull()
			Me(Me.tableLocalFile.DirectoryNameColumn) = Global.System.Convert.DBNull
		End Sub

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
		 Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Public Function IsDirectoryNull() As Boolean
			Return Me.IsNull(Me.tableLocalFile.DirectoryColumn)
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
		 Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Public Sub SetDirectoryNull()
			Me(Me.tableLocalFile.DirectoryColumn) = Global.System.Convert.DBNull
		End Sub

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
		 Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Public Function IsIsReadOnlyNull() As Boolean
			Return Me.IsNull(Me.tableLocalFile.IsReadOnlyColumn)
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
		 Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Public Sub SetIsReadOnlyNull()
			Me(Me.tableLocalFile.IsReadOnlyColumn) = Global.System.Convert.DBNull
		End Sub

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
		 Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Public Function IsExistsNull() As Boolean
			Return Me.IsNull(Me.tableLocalFile.ExistsColumn)
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
		 Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Public Sub SetExistsNull()
			Me(Me.tableLocalFile.ExistsColumn) = Global.System.Convert.DBNull
		End Sub

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
		 Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Public Function IsExtensionNull() As Boolean
			Return Me.IsNull(Me.tableLocalFile.ExtensionColumn)
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
		 Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Public Sub SetExtensionNull()
			Me(Me.tableLocalFile.ExtensionColumn) = Global.System.Convert.DBNull
		End Sub

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
		 Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Public Function IsCreationTimeNull() As Boolean
			Return Me.IsNull(Me.tableLocalFile.CreationTimeColumn)
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
		 Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Public Sub SetCreationTimeNull()
			Me(Me.tableLocalFile.CreationTimeColumn) = Global.System.Convert.DBNull
		End Sub

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
		 Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Public Function IsCreationTimeUtcNull() As Boolean
			Return Me.IsNull(Me.tableLocalFile.CreationTimeUtcColumn)
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
		 Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Public Sub SetCreationTimeUtcNull()
			Me(Me.tableLocalFile.CreationTimeUtcColumn) = Global.System.Convert.DBNull
		End Sub

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
		 Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Public Function IsLastAccessTimeNull() As Boolean
			Return Me.IsNull(Me.tableLocalFile.LastAccessTimeColumn)
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
		 Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Public Sub SetLastAccessTimeNull()
			Me(Me.tableLocalFile.LastAccessTimeColumn) = Global.System.Convert.DBNull
		End Sub

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
		 Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Public Function IsLastAccessTimeUtcNull() As Boolean
			Return Me.IsNull(Me.tableLocalFile.LastAccessTimeUtcColumn)
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
		 Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Public Sub SetLastAccessTimeUtcNull()
			Me(Me.tableLocalFile.LastAccessTimeUtcColumn) = Global.System.Convert.DBNull
		End Sub

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
		 Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Public Function IsLastWriteTimeNull() As Boolean
			Return Me.IsNull(Me.tableLocalFile.LastWriteTimeColumn)
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
		 Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Public Sub SetLastWriteTimeNull()
			Me(Me.tableLocalFile.LastWriteTimeColumn) = Global.System.Convert.DBNull
		End Sub

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
		 Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Public Function IsLastWriteTimeUtcNull() As Boolean
			Return Me.IsNull(Me.tableLocalFile.LastWriteTimeUtcColumn)
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
		 Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Public Sub SetLastWriteTimeUtcNull()
			Me(Me.tableLocalFile.LastWriteTimeUtcColumn) = Global.System.Convert.DBNull
		End Sub

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
		 Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Public Function IsAttributesNull() As Boolean
			Return Me.IsNull(Me.tableLocalFile.AttributesColumn)
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
		 Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Public Sub SetAttributesNull()
			Me(Me.tableLocalFile.AttributesColumn) = Global.System.Convert.DBNull
		End Sub

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
		 Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Public Function IsLastUploadTimeNull() As Boolean
			Return Me.IsNull(Me.tableLocalFile.LastUploadTimeColumn)
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
		 Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Public Sub SetLastUploadTimeNull()
			Me(Me.tableLocalFile.LastUploadTimeColumn) = Global.System.Convert.DBNull
		End Sub

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
		 Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Public Function IsPlaceNull() As Boolean
			Return Me.IsNull(Me.tableLocalFile.PlaceColumn)
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
		 Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Public Sub SetPlaceNull()
			Me(Me.tableLocalFile.PlaceColumn) = Global.System.Convert.DBNull
		End Sub

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
		 Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Public Function IsChurchNull() As Boolean
			Return Me.IsNull(Me.tableLocalFile.ChurchColumn)
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
		 Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Public Sub SetChurchNull()
			Me(Me.tableLocalFile.ChurchColumn) = Global.System.Convert.DBNull
		End Sub

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
		 Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Public Function IsRecordTypeNull() As Boolean
			Return Me.IsNull(Me.tableLocalFile.RecordTypeColumn)
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
		 Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Public Sub SetRecordTypeNull()
			Me(Me.tableLocalFile.RecordTypeColumn) = Global.System.Convert.DBNull
		End Sub

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
		 Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Public Function IsValidFileNull() As Boolean
			Return Me.IsNull(Me.tableLocalFile.ValidFileColumn)
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
		 Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
		Public Sub SetValidFileNull()
			Me(Me.tableLocalFile.ValidFileColumn) = Global.System.Convert.DBNull
		End Sub
	End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class LocalFileRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As LocalFileRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As LocalFileRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As LocalFileRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
