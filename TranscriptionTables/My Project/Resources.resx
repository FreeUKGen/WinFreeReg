<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="err0004" xml:space="preserve">
    <value>The Burial Age is badly formatted</value>
  </data>
  <data name="err0005" xml:space="preserve">
    <value>The Age of the Bride is invalid. The accepted format is: [number][d|w|m], [number]y[number][d|w|m], minor, of age, full age or of full age.</value>
  </data>
  <data name="err0006" xml:space="preserve">
    <value>The Age of the Groom is invalid. The accepted format is: [number][d|w|m], [number]y[number][d|w|m], minor, of age, full age or of full age.</value>
  </data>
  <data name="err0011" xml:space="preserve">
    <value>The entered date is badly formatted</value>
  </data>
  <data name="err0013" xml:space="preserve">
    <value>Invalid month name abbreviation</value>
  </data>
  <data name="err0014" xml:space="preserve">
    <value>A non-numeric month name must be 3 or more characters in length</value>
  </data>
  <data name="err0015" xml:space="preserve">
    <value>In September 1752, the 3rd through to 13th inclusive were omitted from the calendar</value>
  </data>
  <data name="err0016" xml:space="preserve">
    <value>Month is invalid when used in double-dating. Only Jan, Feb and Mar are allowed.</value>
  </data>
  <data name="err0017" xml:space="preserve">
    <value>March 25th and after can not be double-dated</value>
  </data>
  <data name="err0018" xml:space="preserve">
    <value>Turn of century should be expressed with 00</value>
  </data>
  <data name="err0019" xml:space="preserve">
    <value>The double-year entry is invalid. The second part should be one greater than the first part.</value>
  </data>
  <data name="err0020" xml:space="preserve">
    <value>Double-year can not be greater than 99</value>
  </data>
  <data name="err0021" xml:space="preserve">
    <value>Double-year must be numeric</value>
  </data>
  <data name="err0022" xml:space="preserve">
    <value>Year must be numeric</value>
  </data>
  <data name="err0023" xml:space="preserve">
    <value>This date should be double-dated</value>
  </data>
  <data name="err0024" xml:space="preserve">
    <value>Day number should be numeric</value>
  </data>
  <data name="err0025" xml:space="preserve">
    <value>After 1751, double-dating does not apply</value>
  </data>
  <data name="err0026" xml:space="preserve">
    <value>Year was not a leap-year</value>
  </data>
  <data name="err0027" xml:space="preserve">
    <value>Century was not a leap-year</value>
  </data>
  <data name="err0039" xml:space="preserve">
    <value>If separator characters (/- .) are used within a date, then they must be used consistently. They can not be mixed.</value>
  </data>
  <data name="err0041" xml:space="preserve">
    <value>Warning: The Age at Burial is over 100 years and is thus suspect</value>
  </data>
  <data name="err0049" xml:space="preserve">
    <value>Date of Baptism is before the Date of Birth</value>
  </data>
  <data name="err0058" xml:space="preserve">
    <value>The Brides Age at marriage is over 100!</value>
  </data>
  <data name="err0059" xml:space="preserve">
    <value>The Grooms Age at marriage is over 100!</value>
  </data>
  <data name="msgOldperson" xml:space="preserve">
    <value>This person being married or buried is 100 years old or older. Is this correct?</value>
  </data>
  <data name="rgxMarriageAge" xml:space="preserve">
    <value>(?&lt;years&gt;\d{1,3})$|(?&lt;age&gt;\d{1,3}y)(?&lt;months&gt;\d{1,2}m)?(?&lt;weeks&gt;\d{1,2}w)?(?&lt;days&gt;\d{1,2}d)?$</value>
  </data>
  <data name="rgxMarriageAge1" xml:space="preserve">
    <value>^(?&lt;years&gt;\d{1,3})$|^(?&lt;vulgar&gt;\d{1,3}[\u00bc\u00bd\u00be])$|^(?&lt;units&gt;\d{1,3}y)?(?&lt;months&gt;\d{1,2}m)?(?&lt;weeks&gt;\d{1,2}w)?(?&lt;days&gt;\d{1,2}d)?$</value>
  </data>
  <data name="rgxMarriageAgeComplex" xml:space="preserve">
    <value>^(?&lt;year&gt;(?&lt;num1&gt;\d{1,3})(?&lt;unit1&gt;y)(?&lt;num2&gt;\d{1,3})(?&lt;unit2&gt;[dmw]))$</value>
  </data>
  <data name="rgxMarriageAgeSimple" xml:space="preserve">
    <value>^(?&lt;year&gt;(?&lt;number&gt;\d{1,3})(?&lt;unit&gt;[dmw]?))$</value>
  </data>
</root>